{"version":3,"file":"static/js/159.999bc75b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/ImportantContactsPage/important-contacts-page.module.css?7245","pages/ImportantContactsPage/ImportantContactsPage.jsx","shared/contacts.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactsItem\":\"important-contacts-page_contactsItem__DlY0K\",\"contactsText\":\"important-contacts-page_contactsText__Vacsn\",\"contactsBtn\":\"important-contacts-page_contactsBtn__O4GrD\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getImportantContacts } from 'redux/contacts/contacts-selectors';\nimport { fetchDeleteContact } from 'redux/contacts/contacts-operations';\n\nimport css from './important-contacts-page.module.css';\n\nconst ImportantContactsPage = () => {\n  const contacts = useSelector(getImportantContacts);\n\n  const dispatch = useDispatch();\n\n  const handleRemoveContact = id => {\n    const action = fetchDeleteContact(id);\n    dispatch(action);\n  };\n\n  const elements = contacts.map(({ id, name, phone }) => (\n    <li key={id} className={css.contactsItem}>\n      <span className={css.contactsText}>\n        {name}: {phone}\n      </span>\n      <button\n        className={css.contactsBtn}\n        onClick={() => handleRemoveContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  ));\n\n  return <ul className={css.contactsList}>{elements}</ul>;\n};\n\nexport default ImportantContactsPage;\n","import axios from 'axios';\n\nconst contactsInstance = axios.create({\n  baseURL: 'https://6400b65729deaba5cb3df2f4.mockapi.io/contacts',\n});\n\nexport const getAllContacts = async () => {\n  const { data } = await contactsInstance.get('/');\n  return data;\n};\n\nexport const takeContact = async data => {\n  const { data: result } = await contactsInstance.post('/', data);\n  return result;\n};\n\nexport const deleteContact = async id => {\n  const { data } = await contactsInstance.post(`/${id}`);\n  return data;\n};\n","import * as api from '../../shared/contacts';\n\nimport * as actions from './contacts-actions';\n\nexport const fetchAllContacts = () => {\n  const func = async dispatch => {\n    try {\n      dispatch(actions.fetchAllContactsLoading());\n      const data = await api.getAllContacts();\n      dispatch(actions.fetchAllContactsSuccess(data));\n    } catch ({ response }) {\n      dispatch(actions.fetchAllContactsError(response.data.message));\n    }\n  };\n  return func;\n};\n\nconst isDublicate = (contacts, { name }) => {\n  const normalizedName = name.toLowerCase();\n  const result = contacts.find(({ name }) => {\n    return name.toLowerCase() === normalizedName;\n  });\n\n  return Boolean(result);\n};\n\nexport const fetchAddContact = data => {\n  const func = async (dispatch, getState) => {\n    try {\n      const { contacts } = getState();\n      if (isDublicate(contacts.items, data)) {\n        alert(`${data.name} is already in contacts.`);\n        return false;\n      }\n      dispatch(actions.fetchAddContactLoading());\n      const result = await api.takeContact(data);\n      dispatch(actions.fetchAddContactSuccess(result));\n    } catch ({ response }) {\n      dispatch(actions.fetchAddContactError(response.data.message));\n    }\n  };\n  return func;\n};\n\nexport const fetchDeleteContact = id => {\n  const func = async dispatch => {\n    try {\n      dispatch(actions.fetchDeleteContactLoading());\n      await api.deleteContact(id);\n      dispatch(actions.fetchDeleteContactSuccess(id));\n    } catch ({ response }) {\n      dispatch(actions.fetchDeleteContactError(response.data.message));\n    }\n  };\n  return func;\n};\n","export const getAllContacts = ({ contacts }) => contacts.items;\n\nexport const getImportantContacts = ({ contacts }) => {\n  const onlyImportantContacts = contacts.items.filter(\n    ({ importantContact }) => importantContact\n  );\n  return onlyImportantContacts;\n};\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizedContact = filter.toLowerCase();\n  const result = contacts.items.filter(({ name, phone }) => {\n    return (\n      name.toLowerCase().includes(normalizedContact) ||\n      phone.toLowerCase().includes(normalizedContact)\n    );\n  });\n  return result;\n};\n"],"names":["contacts","useSelector","getImportantContacts","dispatch","useDispatch","elements","map","id","name","phone","className","css","onClick","action","fetchDeleteContact","handleRemoveContact","contactsInstance","axios","baseURL","getAllContacts","get","data","takeContact","post","result","deleteContact","fetchAllContacts","func","actions","api","response","message","isDublicate","normalizedName","toLowerCase","find","Boolean","fetchAddContact","getState","items","alert","filter","importantContact","getFilteredContacts","normalizedContact","includes"],"sourceRoot":""}