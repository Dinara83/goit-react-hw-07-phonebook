{"version":3,"file":"static/js/214.0791a62d.chunk.js","mappings":"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","sources":["components/PhonebookContact/inititialState.js","webpack://react-homework-template/./src/components/PhonebookContact/contact-form.module.css?f162","components/PhonebookContact/ContactForm.jsx","redux/filter/filter-selectors.js","webpack://react-homework-template/./src/components/FilterPhonebook/filter-phonebook.module.css?f313","components/FilterPhonebook/FilterPhonebook.jsx","webpack://react-homework-template/./src/components/Contacts/contact-list.module.css?6d9b","components/Contacts/ContactList.jsx","webpack://react-homework-template/./src/components/phonebook.module.css?4f9b","components/Phonebook.jsx","pages/HomePage/HomePage.jsx","shared/contacts.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js"],"sourcesContent":["const inititialState = {\n  name: '',\n  phone: '',\n  importantContact: false,\n};\n\nexport default inititialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"contact-form_wrapper__s1ex-\",\"label\":\"contact-form_label__5BXR4\",\"input\":\"contact-form_input__ddo+t\",\"btn\":\"contact-form_btn__A8oGL\"};","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchAllContacts, fetchAddContact } from 'redux/contacts/contacts-operations';\n\nimport inititialState from './inititialState';\nimport css from './contact-form.module.css';\n\nconst ContactForm = () => {\n  const [state, setState] = useState({ ...inititialState });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n\tdispatch(fetchAllContacts())\n  }, [dispatch]);\n\n  const handleChange = ({ target }) => {\n    const { name, value, type, checked } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => {\n      return { ...prevState, [name]: newValue };\n    });\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    handleAddContact({ ...state });\n    setState({ ...inititialState });\n  };\n\n  const handleAddContact = ({ name, phone, importantContact }) => {\n    const action = fetchAddContact({ name, phone, importantContact });\n    dispatch(action);\n  };\n\n  const { name, phone, importantContact } = state;\n\n  return (\n    <form className={css.wrapper} onSubmit={handleSubmit}>\n      <label className={css.label}>Name</label>\n      <input\n        className={css.input}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label className={css.label}>Number</label>\n      <input\n        className={css.input}\n        value={phone}\n        type=\"tel\"\n        name=\"number\"\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <label className={css.label}>Important Contact</label>\n      <input\n        name=\"importantContact\"\n        checked={importantContact}\n        type=\"checkbox\"\n        onChange={handleChange}\n      />\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperFilter\":\"filter-phonebook_wrapperFilter__ciemP\",\"labelFilter\":\"filter-phonebook_labelFilter__vfa04\",\"inputFilter\":\"filter-phonebook_inputFilter__Ep+md\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { getFilter } from 'redux/filter/filter-selectors';\n\nimport css from './filter-phonebook.module.css';\n\nconst FilterPhonebook = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <form className={css.wrapperFilter}>\n      <label className={css.labelFilter}>Find contacts by name</label>\n      <input\n        value={filter}\n        className={css.inputFilter}\n        type=\"text\"\n        name=\"filter\"\n        onChange={changeFilter}\n      />\n    </form>\n  );\n};\n\nexport default FilterPhonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"contact-list_contactsList__Ab1Ox\",\"contactsText\":\"contact-list_contactsText__Try7T\",\"contactsBtn\":\"contact-list_contactsBtn__BU7fk\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { fetchDeleteContact } from 'redux/contacts/contacts-operations';\n\nimport {\n  getAllContacts,\n  getFilteredContacts,\n} from 'redux/contacts/contacts-selectors';\n\nimport css from './contact-list.module.css';\n\nconst ContactList = () => {\n  const filterContacts = useSelector(getFilteredContacts);\n  const allContacts = useSelector(getAllContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    const action = fetchDeleteContact(id);\n    dispatch(action);\n  };\n\n  const elements = filterContacts.map(\n    ({ id, name, phone, importantContact }) => (\n      <li style={{ fontWeight: importantContact ? 'bold' : 'normal' }} key={id}>\n        <span className={css.contactsText}>\n          {name}: {phone}\n        </span>\n        <button className={css.contactsBtn} onClick={() => onDeleteContact(id)}>\n          Delete\n        </button>\n      </li>\n    )\n  );\n  const isContacts = Boolean(allContacts.length);\n\n  return (\n    <>\n      <div>\n        <ul className={css.contactsList}>{elements}</ul>\n      </div>\n      {!isContacts && <p>No contacts</p>}\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"conteinerPhonebook\":\"phonebook_conteinerPhonebook__tbx9-\",\"text\":\"phonebook_text__GatYR\"};","import ContactForm from 'components/PhonebookContact/ContactForm';\nimport FilterPhonebook from 'components/FilterPhonebook/FilterPhonebook';\nimport ContactList from 'components/Contacts/ContactList';\n\nimport css from './phonebook.module.css';\n\nconst Phonebook = () => {\n  return (\n    <main className={css.conteinerPhonebook}>\n      <ContactForm />\n      <h2 className={css.text}>Contacts</h2>\n      <FilterPhonebook />\n      <ContactList />\n    </main>\n  );\n};\n\nexport default Phonebook;\n","import Phonebook from 'components/Phonebook';\n\nconst HomePage = () => {\n  return <Phonebook />;\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst contactsInstance = axios.create({\n  baseURL: 'https://6400b65729deaba5cb3df2f4.mockapi.io/contacts',\n});\n\nexport const getAllContacts = async () => {\n  const { data } = await contactsInstance.get('/');\n  return data;\n};\n\nexport const takeContact = async data => {\n  const { data: result } = await contactsInstance.post('/', data);\n  return result;\n};\n\nexport const deleteContact = async id => {\n  const { data } = await contactsInstance.post(`/${id}`);\n  return data;\n};\n","import * as api from '../../shared/contacts';\n\nimport * as actions from './contacts-actions';\n\nexport const fetchAllContacts = () => {\n  const func = async dispatch => {\n    try {\n      dispatch(actions.fetchAllContactsLoading());\n      const data = await api.getAllContacts();\n      dispatch(actions.fetchAllContactsSuccess(data));\n    } catch ({ response }) {\n      dispatch(actions.fetchAllContactsError(response.data.message));\n    }\n  };\n  return func;\n};\n\nconst isDublicate = (contacts, { name }) => {\n  const normalizedName = name.toLowerCase();\n  const result = contacts.find(({ name }) => {\n    return name.toLowerCase() === normalizedName;\n  });\n\n  return Boolean(result);\n};\n\nexport const fetchAddContact = data => {\n  const func = async (dispatch, getState) => {\n    try {\n      const { contacts } = getState();\n      if (isDublicate(contacts.items, data)) {\n        alert(`${data.name} is already in contacts.`);\n        return false;\n      }\n      dispatch(actions.fetchAddContactLoading());\n      const result = await api.takeContact(data);\n      dispatch(actions.fetchAddContactSuccess(result));\n    } catch ({ response }) {\n      dispatch(actions.fetchAddContactError(response.data.message));\n    }\n  };\n  return func;\n};\n\nexport const fetchDeleteContact = id => {\n  const func = async dispatch => {\n    try {\n      dispatch(actions.fetchDeleteContactLoading());\n      await api.deleteContact(id);\n      dispatch(actions.fetchDeleteContactSuccess(id));\n    } catch ({ response }) {\n      dispatch(actions.fetchDeleteContactError(response.data.message));\n    }\n  };\n  return func;\n};\n","export const getAllContacts = ({ contacts }) => contacts.items;\n\nexport const getImportantContacts = ({ contacts }) => {\n  const onlyImportantContacts = contacts.items.filter(\n    ({ importantContact }) => importantContact\n  );\n  return onlyImportantContacts;\n};\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizedContact = filter.toLowerCase();\n  const result = contacts.items.filter(({ name, phone }) => {\n    return (\n      name.toLowerCase().includes(normalizedContact) ||\n      phone.toLowerCase().includes(normalizedContact)\n    );\n  });\n  return result;\n};\n"],"names":["name","phone","importantContact","useState","inititialState","state","setState","dispatch","useDispatch","useEffect","fetchAllContacts","handleChange","target","value","type","checked","newValue","prevState","handleAddContact","action","fetchAddContact","className","css","onSubmit","evt","preventDefault","onChange","pattern","title","required","getFilter","filter","useSelector","setFilter","filterContacts","getFilteredContacts","allContacts","getAllContacts","elements","map","id","style","fontWeight","onClick","fetchDeleteContact","onDeleteContact","isContacts","Boolean","length","contactsInstance","axios","baseURL","get","data","takeContact","post","result","deleteContact","func","actions","api","response","message","isDublicate","contacts","normalizedName","toLowerCase","find","getState","items","alert","getImportantContacts","normalizedContact","includes"],"sourceRoot":""}